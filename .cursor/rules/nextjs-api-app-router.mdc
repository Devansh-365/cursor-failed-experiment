---
description: Next.js App Router Best Practices
globs: *.ts,*.tsx
alwaysApply: false
---
# Next.js App Router Conventions

<rule>
name: nextjs_app_router_conventions
description: Best practices for building applications with Next.js App Router

filters:
  - type: file_extension
    pattern: "\\.(ts|tsx)$"
  - type: content
    pattern: "import|export|default|function|component|page|layout|loading|error|not-found"

actions:
  - type: suggest
    message: |
      ## Next.js App Router Best Practices
      
      Follow these conventions when building applications with Next.js App Router to ensure performance, maintainability, and adherence to the React Server Components paradigm.
      
      ### Project Structure
      
      Organize your application with a clear file structure:
      
      ```
      app/
      ├── (auth)/          # Route group for authentication pages
      │   ├── login/       # Login page
      │   └── register/    # Register page
      ├── api/             # API routes
      │   └── waitlist/    # Waitlist API endpoint
      ├── waitlist/        # Waitlist page
      │   ├── components/  # Page-specific components
      │   ├── page.tsx     # Page component
      │   └── layout.tsx   # Layout component
      ├── components/      # Shared components
      ├── lib/             # Utility functions and shared code
      ├── providers/       # Context providers
      ├── layout.tsx       # Root layout
      └── page.tsx         # Home page
      ```
      
      ### File Conventions
      
      Use Next.js App Router special files:
      
      - `page.tsx`: Defines routes and renders UI
      - `layout.tsx`: Defines shared layouts
      - `loading.tsx`: Loading UI for route segments
      - `error.tsx`: Error handling for route segments
      - `not-found.tsx`: 404 page for route segments
      - `route.ts`: API endpoints (in `/api` directory)
      
      ### Component Types
      
      #### Server Components (Default)
      
      Use server components for most UI that doesn't require client interactivity:
      
      ```tsx
      // app/waitlist/page.tsx
      import { Suspense } from 'react';
      import { WaitlistForm } from './components/waitlist-form';
      import { WaitlistStats } from './components/waitlist-stats';
      
      export default async function WaitlistPage() {
        // Server-side data fetching
        const stats = await getWaitlistStats();
        
        return (
          <div className="container mx-auto py-12">
            <h1 className="text-3xl font-bold">Join Our Waitlist</h1>
            <p className="mt-2 text-gray-600">Be the first to know when we launch.</p>
            
            <div className="mt-8">
              <Suspense fallback={<div>Loading form...</div>}>
                <WaitlistForm />
              </Suspense>
            </div>
            
            <div className="mt-12">
              <Suspense fallback={<div>Loading stats...</div>}>
                <WaitlistStats stats={stats} />
              </Suspense>
            </div>
          </div>
        );
      }
      ```
      
      #### Client Components
      
      For interactive UI elements, use client components:
      
      ```tsx
      // app/waitlist/components/waitlist-form.tsx
      'use client';
      
      import { useState } from 'react';
      import { useForm } from 'react-hook-form';
      import { zodResolver } from '@hookform/resolvers/zod';
      import { WaitlistSchema, WaitlistFormData } from '@/lib/validations/waitlist';
      
      export function WaitlistForm() {
        const [isSubmitting, setIsSubmitting] = useState(false);
        const [formStatus, setFormStatus] = useState<'idle' | 'success' | 'error'>('idle');
        
        const form = useForm<WaitlistFormData>({
          resolver: zodResolver(WaitlistSchema),
          defaultValues: {
            email: ''
          }
        });
        
        const onSubmit = async (data: WaitlistFormData) => {
          setIsSubmitting(true);
          
          try {
            const response = await fetch('/api/waitlist', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(data)
            });
            
            const result = await response.json();
            
            if (response.ok) {
              setFormStatus('success');
              form.reset();
            } else {
              setFormStatus('error');
              // Handle validation errors
              if (result.errors) {
                Object.entries(result.errors).forEach(([field, message]) => {
                  form.setError(field as any, { message: message as string });
                });
              }
            }
          } catch (error) {
            setFormStatus('error');
          } finally {
            setIsSubmitting(false);
          }
        };
        
        return (
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            {/* Form fields */}
          </form>
        );
      }
      ```
      
      ### Data Fetching
      
      Use Next.js data fetching patterns:
      
      #### Server Component Data Fetching
      
      ```tsx
      // app/waitlist/page.tsx
      export default async function WaitlistPage() {
        // Fetch data directly in server components
        const stats = await fetch('https://api.example.com/stats', { next: { revalidate: 60 } })
          .then(res => res.json());
        
        return (
          <div>
            <h1>Join our waitlist</h1>
            <p>Join {stats.count} others on our waitlist!</p>
            {/* Rest of the UI */}
          </div>
        );
      }
      ```
      
      #### API Routes for Client Components
      
      ```tsx
      // app/api/waitlist/route.ts
      import { NextRequest, NextResponse } from 'next/server';
      import { prisma } from '@/lib/prisma';
      
      export async function GET() {
        const count = await prisma.subscriber.count();
        return NextResponse.json({ count });
      }
      
      export async function POST(req: NextRequest) {
        // Handle POST request
      }
      ```
      
      ### Layouts
      
      Create consistent layouts with layout components:
      
      ```tsx
      // app/layout.tsx
      import { Inter } from 'next/font/google';
      import { Providers } from './providers';
      import './globals.css';
      
      const inter = Inter({ subsets: ['latin'] });
      
      export const metadata = {
        title: 'Credit Card Reward Optimization',
        description: 'Join our waitlist for credit card reward optimization',
      };
      
      export default function RootLayout({
        children,
      }: {
        children: React.ReactNode;
      }) {
        return (
          <html lang="en">
            <body className={inter.className}>
              <Providers>
                <header>{/* Header content */}</header>
                <main>{children}</main>
                <footer>{/* Footer content */}</footer>
              </Providers>
            </body>
          </html>
        );
      }
      ```
      
      ### Loading UI
      
      Implement loading states:
      
      ```tsx
      // app/waitlist/loading.tsx
      export default function Loading() {
        return (
          <div className="flex items-center justify-center min-h-screen">
            <div className="animate-pulse space-y-4">
              <div className="h-8 w-60 bg-gray-200 rounded"></div>
              <div className="h-4 w-40 bg-gray-200 rounded"></div>
              <div className="h-12 w-80 bg-gray-200 rounded"></div>
            </div>
          </div>
        );
      }
      ```
      
      ### Error Handling
      
      Handle errors gracefully:
      
      ```tsx
      // app/waitlist/error.tsx
      'use client';
      
      import { useEffect } from 'react';
      
      export default function Error({
        error,
        reset,
      }: {
        error: Error & { digest?: string };
        reset: () => void;
      }) {
        useEffect(() => {
          // Log the error to an error reporting service
          console.error(error);
        }, [error]);
        
        return (
          <div className="flex flex-col items-center justify-center min-h-[50vh]">
            <h2 className="text-xl font-semibold">Something went wrong!</h2>
            <p className="mt-2 text-gray-600">We encountered an error while loading this page.</p>
            <button
              onClick={reset}
              className="mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
            >
              Try again
            </button>
          </div>
        );
      }
      ```
      
      ### Metadata
      
      Add metadata for SEO:
      
      ```tsx
      // app/waitlist/page.tsx
      import { Metadata } from 'next';
      
      export const metadata: Metadata = {
        title: 'Join Our Waitlist | Credit Card Rewards',
        description: 'Be the first to know when our credit card reward optimization platform launches.',
        openGraph: {
          title: 'Join Our Waitlist | Credit Card Rewards',
          description: 'Be the first to know when our credit card reward optimization platform launches.',
          url: 'https://example.com/waitlist',
          siteName: 'Credit Card Rewards',
          images: [
            {
              url: 'https://example.com/og-image.jpg',
              width: 1200,
              height: 630,
              alt: 'Credit Card Rewards Waitlist',
            },
          ],
          locale: 'en_US',
          type: 'website',
        },
      };
      
      export default function WaitlistPage() {
        // Page component
      }
      ```
      
      ### Performance Optimization
      
      Optimize performance:
      
      1. **Streaming & Suspense**
      
      ```tsx
      // app/page.tsx
      import { Suspense } from 'react';
      import { HeroSection } from '@/components/hero-section';
      import { FeatureSection } from '@/components/feature-section';
      import { WaitlistSection } from '@/components/waitlist-section';
      
      export default function HomePage() {
        return (
          <div>
            <HeroSection />
            <Suspense fallback={<div>Loading features...</div>}>
              <FeatureSection />
            </Suspense>
            <Suspense fallback={<div>Loading waitlist...</div>}>
              <WaitlistSection />
            </Suspense>
          </div>
        );
      }
      ```
      
      2. **Image Optimization**
      
      ```tsx
      import Image from 'next/image';
      
      export function HeroImage() {
        return (
          <div className="relative h-[500px] w-full">
            <Image
              src="/hero-image.jpg"
              alt="Credit card rewards"
              fill
              sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
              priority
              className="object-cover"
            />
          </div>
        );
      }
      ```
      
      3. **Route Prefetching**
      
      ```tsx
      import Link from 'next/link';
      
      export function Navigation() {
        return (
          <nav>
            <Link href="/" prefetch={false}>Home</Link>
            <Link href="/waitlist">Join Waitlist</Link>
            <Link href="/features">Features</Link>
          </nav>
        );
      }
      ```
      
      ### State Management
      
      Implement state management for client components:
      
      ```tsx
      // app/providers.tsx
      'use client';
      
      import { createContext, useContext, useState } from 'react';
      
      type WaitlistContextType = {
        hasJoined: boolean;
        setHasJoined: (value: boolean) => void;
      };
      
      const WaitlistContext = createContext<WaitlistContextType | undefined>(undefined);
      
      export function WaitlistProvider({ children }: { children: React.ReactNode }) {
        const [hasJoined, setHasJoined] = useState(false);
        
        return (
          <WaitlistContext.Provider value={{ hasJoined, setHasJoined }}>
            {children}
          </WaitlistContext.Provider>
        );
      }
      
      export function useWaitlist() {
        const context = useContext(WaitlistContext);
        if (context === undefined) {
          throw new Error('useWaitlist must be used within a WaitlistProvider');
        }
        return context;
      }
      
      export function Providers({ children }: { children: React.ReactNode }) {
        return (
          <WaitlistProvider>
            {children}
          </WaitlistProvider>
        );
      }
      ```

examples:
  - input: |
      // app/waitlist/page.js
      export default function WaitlistPage() {
        return (
          <div>
            <h1>Join Waitlist</h1>
            <form>
              <input type="email" placeholder="Email" />
              <button type="submit">Join</button>
            </form>
          </div>
        );
      }
    output: |
      // app/waitlist/page.tsx
      import { Metadata } from 'next';
      import { Suspense } from 'react';
      import { WaitlistForm } from './components/waitlist-form';
      import { WaitlistStats } from './components/waitlist-stats';
      
      export const metadata: Metadata = {
        title: 'Join Our Waitlist | Credit Card Rewards',
        description: 'Be the first to know when our credit card reward optimization platform launches.',
      };
      
      export default async function WaitlistPage() {
        // Server-side data fetching
        const stats = await fetch('/api/waitlist/count', { next: { revalidate: 60 } })
          .then(res => res.json())
          .catch(() => ({ count: 0 }));
          
        return (
          <div className="container mx-auto py-12 px-4">
            <h1 className="text-4xl font-medium tracking-tight text-white">Join Our Waitlist</h1>
            <p className="mt-2 text-lg text-white/80">Be the first to know when our credit card reward optimization platform launches.</p>
            
            <div className="mt-8">
              <Suspense fallback={<div className="h-12 w-full bg-black/20 animate-pulse rounded-xl"></div>}>
                <WaitlistForm />
              </Suspense>
            </div>
            
            <div className="mt-12">
              <Suspense fallback={<div className="h-8 w-40 bg-black/20 animate-pulse rounded-xl"></div>}>
                <WaitlistStats count={stats.count} />
              </Suspense>
            </div>
          </div>
        );
      }

metadata:
  priority: high
  version: 1.0
</rule> 